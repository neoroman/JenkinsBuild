#!/bin/sh
##
## Parsing arguments, https://stackoverflow.com/a/14203146
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
  -c | --config)
    CUSTOM_CONFIG_PATH="$2"
    if [ -f $CUSTOM_CONFIG_PATH ]; then
      CUSTOM_CONFIG=1
    fi
    shift # past argument
    shift # past value
    ;;
  -l | --language)
    CUSTOM_LANG_PATH="$2"
    if [ -f $CUSTOM_LANG_PATH ]; then
      CUSTOM_LANG=1
    fi
    shift # past argument
    shift # past value
    ;;
  -eo | --exportoptions)
    CUSTOM_EXPORT_OPTIONS_PATH="$2"
    if [ -f $CUSTOM_EXPORT_OPTIONS_PATH ]; then
      CUSTOM_EXPORT_OPTIONS=1
    fi
    shift # past argument
    shift # past value
    ;;
  -p | --platform)
    INPUT_OS="$2"
    shift # past argument
    shift # past value
    ;;
  -x | --xcode)
    XCODE_DEVELOPER="$2"
    shift # past argument
    shift # past value
    ;;
  -tp | --toppath)
    TOP_PATH="$2"
    shift # past argument
    shift # past value
    ;;
  -dr | --docroot)
    APP_ROOT_PREFIX="$2"
    shift # past argument
    shift # past value
    ;;
  -ff | --flutterflag)
    FLUTTER_FLAG="$2"
    shift # past argument
    shift # past value
    ;;
  -fvm | --flutterversionmangement)
    FLUTTER_VERSION="$2"
    shift # past argument
    shift # past value
    ;;
  -no | --node-options)
    NODE_OPTION_FLAG="$2"
    shift # past argument
    shift # past value
    ;;
  -r | --release)
    IS_RELEASE=1
    RELEASE_TYPE="release"
    shift # past argument
    ;;
  -d | --debug)
    DEBUGGING=1
    shift # past argument
    ;;
  no-output | -no | --no-output)
    PRODUCE_OUTPUT_USE=0
    shift # past argument
    ;;
  output-exit | -oe | --output-exit)
    PRODUCE_OUTPUT_USE=0
    OUTPUT_AND_EXIT_USE=1
    shift # past argument
    ;;
  --no-screenshot | no-screenshot)
    USING_SCREENSHOT=0
    shift # past argument
    ;;
  --use_dSYM_file | -dSYM)
    USING_DSYM=1
    shift # past argument
    ;;  
  --merge-tag-master)
    LAST_TAG=$($GIT describe --tags)
    $GIT pull
    $GIT merge $LAST_TAG
    $GIT push
    exit
    ;;
  -ctb | --current-tag-branch)
    LAST_TAG=$($GIT describe --tags)
    if [ -z $LAST_TAG ]; then
      LAST_TAG="master"
    fi
    if [ $($GIT remote -v | grep "^external" >/dev/null && [ $? -eq 0 ] && echo 1 || echo 0) -eq 1 ]; then
      $GIT fetch --prune
      $GIT branch -r | grep -v '\->' | grep -v 'external/' | while read remote; do $GIT branch --track "${remote#origin/}" "$remote" --force >/dev/null; done
    fi
    $GIT fetch --all
    SYNC_TO_BE=$($GIT branch --contains tags/${LAST_TAG} | grep -vi 'head' | tail -1 | tr -d ' *')
    $GIT checkout ${SYNC_TO_BE}
    exit
    ;;
  --without-tag-push)
    WITH_TAG_PUSH=0
    shift # past argument
    ;;
  --for-master-branch)
    FOR_MASTER_BRANCH=1
    FOR_ALL_BRANCH=0
    shift # past argument
    ;;
  --for-all-branch)
    FOR_ALL_BRANCH=1
    FOR_MASTER_BRANCH=0
    shift # past argument
    ;;
  --for-specific-branch)
    FOR_SPECIFIC_BRANCH=1
    SPECIPIC_BRANCH="$2"
    FOR_ALL_BRANCH=0
    FOR_MASTER_BRANCH=0
    shift # past argument
    shift # past value
    ;;
  --force)
    PUSH_FORCE=1
    shift # past argument
    ;;
  -pfu | --pull-from-upstream)
    upstreamUrl="$2"
    getGitDomainFromUrl
    if [ $($GIT remote -v | grep "${upstreamDomain}" >/dev/null && [ $? -eq 0 ] && echo 1 || echo 0) -eq 0 ]; then
      $GIT remote add external $upstreamUrl
    fi
    $GIT config user.name $GIT_USER
    $GIT config user.email $GIT_EMAIL
    $GIT config core.autocrlf false
    $GIT config pull.rebase true
    $GIT fetch --prune
    CURRENT_BRANCH=$($GIT rev-parse --abbrev-ref HEAD)
    CURRENT_BRANCH=${CURRENT_BRANCH#"heads/"}
    $GIT branch -r | grep -v '\->' | grep -v 'origin/' | grep -v "${CURRENT_BRANCH}" | while read remote; do $GIT branch --track "${remote#external/}" "$remote" --force >/dev/null; done
    $GIT fetch --all
    if test -d jenkins; then
      $GIT restore --staged .gitmodules jenkins
    fi
    $GIT branch -r | grep -v '\->' | grep -v 'remotes/' | grep -v 'origin/' | grep -v "${SPECIPIC_BRANCH}" | \
        while read remote; do $GIT stash; $GIT checkout --track "${remote}"; $GIT pull external "${remote#external/}"; \
        sleep 1; $GIT push -f origin >/dev/null; done
    shift # past argument
    shift # past value
    ;;
  -pu | --push-to-upstream)
    upstreamUrl="$2"
    getGitDomainFromUrl
    if [ $($GIT remote -v | grep "${upstreamDomain}" >/dev/null && [ $? -eq 0 ] && echo 1 || echo 0) -eq 0 ]; then
      $GIT remote add external $upstreamUrl
    fi
    $GIT config user.name $GIT_USER
    $GIT config user.email $GIT_EMAIL
    $GIT config core.autocrlf false
    $GIT config pull.rebase true
    $GIT fetch --prune
    CURRENT_BRANCH=$($GIT rev-parse --abbrev-ref HEAD)
    CURRENT_BRANCH=${CURRENT_BRANCH#"heads/"}
    $GIT branch -r | grep -v '\->' | grep -v 'external/' | grep -v "${CURRENT_BRANCH}" | while read remote; do $GIT branch --track "${remote#origin/}" "$remote" --force >/dev/null; done
    $GIT fetch --all
    if [ $FOR_ALL_BRANCH -eq 0 ]; then
      if [ $FOR_SPECIFIC_BRANCH -eq 1 ]; then
        SYNC_TO_BE="$SPECIPIC_BRANCH"
      elif [ $FOR_MASTER_BRANCH -eq 0 ]; then
        LAST_TAG=$($GIT describe --tags)
        if [ -z $LAST_TAG ]; then
          LAST_TAG=$($GIT config --get init.defaultbranch)
          SYNC_TO_BE=${LAST_TAG}
        else
          SYNC_TO_BE=$($GIT branch --contains tags/${LAST_TAG} | grep -v 'head' | tail -1 | tr -d ' *')
        fi
      else
        default_branch=$(git remote show origin | grep "HEAD branch" | awk '{print $NF}')
        SYNC_TO_BE="${default_branch}"
      fi
      if [[ ! -z "$SYNC_TO_BE" ]]; then
        $GIT checkout ${SYNC_TO_BE}
        if [ $PUSH_FORCE -eq 1 ]; then
          $GIT push -uf external ${SYNC_TO_BE}
        else
          $GIT push -u external ${SYNC_TO_BE}
        fi
      fi
    else
      if test -d jenkins; then
        $GIT restore --staged .gitmodules jenkins
      fi
      if [ $PUSH_FORCE -eq 1 ]; then
        GIT_OPTION="-uf"
      else
        GIT_OPTION="-u"
      fi
      $GIT branch -r | grep -v '\->' | grep -v 'remotes/' | grep -v 'external/' | \
          while read remote; do $GIT checkout "${remote#origin/}"; $GIT pull origin "${remote#origin/}"; \
          sleep 1; $GIT push ${GIT_OPTION} external >/dev/null; done
    fi
    if [ $WITH_TAG_PUSH -eq 1 ]; then
      $GIT push -u external --tags -f
    fi
    exit
    ;;
  * | -h | --help) # unknown option
    shift          # past argument
    echo "Usage: $SCRIPT_NAME -p {ios|android} -d"
    echo ""
    echo "optional arguments:"
    echo "   -h, --help        show this help message and exit:"
    echo "   -p, --platform    {ios,android}"
    echo "                     assign platform as iOS or Android to processing"
    echo "   -tp, --toppath    {TOP_PATH}"
    echo "                     assign TOP_PATH to installing output of iOS or Android"
    echo "   -c, --config      {SITE_CONFIG.json}"
    echo "                     ex) ${WORKSPACE}/jankins_config/config.json"
    echo "   -l, --language    {SITE_LANGUAGE.json}"
    echo "                     ex) ${WORKSPACE}/jankins_config/lang_en.json"
    echo "   -d, --debug       debugging mode"
    exit
    ;;
  esac
done
################################################################################
if test -z $TOP_PATH; then
  TOP_PATH="Company/Projects"
  echo ""
  echo "Warning: make sure your distribution site is in $TOP_PATH...!!!"
  echo ""
fi
USING_SLACK=0
### Using Teams or Not, 0=Not Using, 1=Using Teams
USING_TEAMS_WEBHOOK=0
if test -z $APP_ROOT_PREFIX; then
  APP_ROOT_PREFIX="${appRootPrefix}"
fi
if [ $DEBUGGING -eq 1 ]; then
  FRONTEND_POINT="http://127.0.0.1"
  TEAMS_WEBHOOK="${teamWebHook_debug}"
else
  FRONTEND_POINT="${frontEndPointUrl}"
  TEAMS_WEBHOOK="${teamWebHook}"
fi
if [ ! -d ${APP_ROOT_PREFIX}/${TOP_PATH} ]; then
  CURRENT_PATH=$PWD
  mkdir -p ${APP_ROOT_PREFIX}/${TOP_PATH}
  if [ -d ${APP_ROOT_PREFIX}/${TOP_PATH} ]; then
    cd ${APP_ROOT_PREFIX}/${TOP_PATH}
    TOP_PATH_NAME=$(basename $PWD)
    cd ..
    rm -rf $TOP_PATH_NAME
    $GIT clone ${siteRepositoryUrl} $TOP_PATH_NAME
    chmod 777 ${APP_ROOT_PREFIX}/${TOP_PATH}

    # Update distribution site source
    if [ -f ${APP_ROOT_PREFIX}/${TOP_PATH}/.htaccess ]; then
      if [ -f ${APP_ROOT_PREFIX}/${TOP_PATH}/installOrUpdate.sh ]; then
        cd ${APP_ROOT_PREFIX}/${TOP_PATH} && ./installOrUpdate.sh
      fi
    fi
  fi
  cd $CURRENT_PATH
fi
################################################################################
if [ ! -d ${APP_ROOT_PREFIX}/${TOP_PATH} ]; then
  echo ""
  echo "Error: please make distribution site, like following:"
  echo "       mkdir -p ${APP_ROOT_PREFIX}/${TOP_PATH}"
  echo ""
  exit 2
fi
################################################################################
# JQ=$(which jq)
if test -z "$JQ"; then
  if command -v jq >/dev/null; then
    JQ=$(command -v jq)
  elif [ -f "/usr/local/bin/jq" ]; then
    JQ="/usr/local/bin/jq"
  elif [ -f "/usr/bin/jq" ]; then
    JQ="/usr/bin/jq"
  else
    JQ="/bin/jq"
  fi
  if [ ! -f $JQ ]; then
    # echo ""
    # echo "Error: please install `jq` via Homebrew on macOS"
    # echo "       brew install jq"
    # echo "       `jq` is Lightweight and flexible command-line JSON processor"
    # exit
    if command -v brew >/dev/null; then
      brew install jq
    fi
  fi
fi
